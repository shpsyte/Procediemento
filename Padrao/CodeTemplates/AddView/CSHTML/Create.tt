<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ import namespace="Microsoft.VisualStudio.Web.Mvc.Scaffolding.BuiltIn" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Microsoft.VisualStudio.Web.Mvc.Scaffolding.BuiltIn" #>
<#
MvcTextTemplateHost mvcHost = MvcTemplateHost;
#>
 @model <#= mvcHost.ViewDataTypeName.Split('.').Last() #>
<#
// The following chained if-statement outputs the file header code and markup for a partial view, a content page, or a regular view.
if(mvcHost.IsPartialView) {
#>

<#
} else if(mvcHost.IsContentPage) {
#>

@{
     ViewBag.Title = @Html.T("titleCreate").ToString();
<#
if (!String.IsNullOrEmpty(mvcHost.MasterPageFile)) {
#>
    
     Layout = "<#= mvcHost.MasterPageFile#>";
<#
}
#>
}
<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#= mvcHost.ViewName #></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>

@{
    var options = new AjaxOptions()
                      {
                          Url = Url.Action("Create", "<#= mvcHost.ViewDataTypeName.Split('.').Last() #>"),
                          OnBegin = "Iniciando",
                          OnSuccess = "Sucesso ('Index', 'Procedimento/<#= mvcHost.ViewDataTypeName.Split('.').Last() #>') ",
                          OnFailure = "Erro",
                          HttpMethod = "Post",
						  OnComplete = "Complete"
                      };  
}

<div class="container">
    <p><span class="label label">@Html.T("<#= mvcHost.ViewDataTypeName.Split('.').Last() #>")</span></p>
    @using (Ajax.BeginForm(options)) 
    {
        @Html.ValidationSummary(true)
        <div class="control">
            <div class="container">
                <div class="pull-left">
                    <p>
                        <button type="submit" class="btn btn-primary">
                            <i class="icon-ok icon-white"></i>@Html.T("btbGravar").ToString()
                        </button>
                        <a class="btn " href="@Url.Action("Index", "<#= mvcHost.ViewDataTypeName.Split('.').Last() #>")"><i class="fa fa-caret-left"></i>@Html.T("VoltarListagem")</a>
                    </p>
                </div>
            </div>
            <div class="containerisco">

                <div class="tabbable">
                    
                    <ul class="nav nav-tabs">
                        <li class="active"><a href="#tab1" data-toggle="tab">@Html.T("Geral")</a></li>
                        <li><a href="#tab2" data-toggle="tab"></a></li>
                    </ul>
                    <div class="tab-content">
                        <div class="tab-pane active" id="tab1">
                            <div class="controls">
							  <div class="row">
								<#
								foreach (ModelProperty property in GetModelProperties(mvcHost.ViewDataType)) {
									if (!property.IsPrimaryKey && property.Scaffold) {
								#>
								<# string _classe = ""; #>


									
									<#if (property.UnderlyingType == typeof (string))
									{
								     	int inputlength = Convert.ToInt32(property.MaxLength);
										

										 if (inputlength >= 1 && inputlength <= 7) {   
										   _classe = "input-mini";
										 }

										 if (inputlength >= 8 && inputlength <= 12) {   
										   _classe = "input-small";
										 }


										 if (inputlength >= 13 && inputlength <= 19) {   
										   _classe = "form-control";
										 }

										 if (inputlength >= 20 && inputlength <= 30) {   
										   _classe = "form-control";
										 }

										 if (inputlength >= 31 ) {   
										   _classe = "form-control";
										 }




										 if (inputlength == 1) {   #>
										  <div class="span3">
										    @Html.HiddenFor(model => model.<#= property.ValueExpression #>, new { id = "<#= property.ValueExpression #>" })
											 <label class="checkbox">
                                                <input type="checkbox" id="_<#= property.ValueExpression #>"  />
                                                @Html.DisplayNameFor(model => model.<#= property.ValueExpression #>)
                                            </label>
										 </div>


										 <# } else {  #>
										 <div class="span3">
										  <div class="display-label">
										      <span class="display-label-text">@Html.DisplayNameFor(model => model.<#= property.ValueExpression #>)</span>
									       </div>
										   <div class="display-field">
												@Html.TextBoxFor(model => model.<#= property.ValueExpression #>, new { @class = "<#= _classe #>" })
												@Html.ValidationMessageFor(model => model.<#= property.ValueExpression #>)
											</div>
											 </div>
											<#}#>

						  	 	  <# } else { #>
									<div class="span3">
									<div class="display-label">
										 <span class="display-label-text">@Html.DisplayNameFor(model => model.<#= property.ValueExpression #>)</span>
									</div>

									<div class="display-field">
									@Html.TextBoxFor(model => model.<#= property.ValueExpression #>, new { @class = "form-control" })
									@Html.ValidationMessageFor(model => model.<#= property.ValueExpression #>)
									</div>
									</div>


								<#} #>
									
								<#
									}
								}
								#> 
                             </div>
							</div>
                        </div>
                        <div class="tab-pane" id="tab2">
                            <div class="controls">
                                <div class="display-label">
                                </div>
                                <div class="display-field">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
         
    }
</div>






<#
foreach (ModelProperty property_JS in GetModelProperties(mvcHost.ViewDataType)) {
	if (!property_JS.IsPrimaryKey && property_JS.Scaffold) {
#>
	<#if (property_JS.UnderlyingType == typeof (string))
	{
		int inputlength = Convert.ToInt32(property_JS.MaxLength);
			if (inputlength == 1) {   #> 
			<script type="text/javascript"> <# break; #>
			<# }  #>
	<# } #>
<#} } #>


<#
foreach (ModelProperty property_JS in GetModelProperties(mvcHost.ViewDataType)) {
	if (!property_JS.IsPrimaryKey && property_JS.Scaffold) {
#>
	<#if (property_JS.UnderlyingType == typeof (string))
	{
		int inputlength = Convert.ToInt32(property_JS.MaxLength);
			if (inputlength == 1) {   #> 
			     $("#_<#= property_JS.ValueExpression #>").click(function () {
					var isChecked = $(this).is(":checked");
					$("#<#= property_JS.ValueExpression #>").val(isChecked ? "S" : "N");
				});
			<# }  #>
	<# } #>
<#} } #>


<#
foreach (ModelProperty property_JS in GetModelProperties(mvcHost.ViewDataType)) {
	if (!property_JS.IsPrimaryKey && property_JS.Scaffold) {
#>
	<#if (property_JS.UnderlyingType == typeof (string))
	{
		int inputlength = Convert.ToInt32(property_JS.MaxLength);
			if (inputlength == 1) {   #> 
			 </script> <# break; #>

			<# }  #>
	<# } #>
<#} } #>



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string AssociationName { get; set; }
    public string ValueExpression { get; set; }
    public string ModelValueExpression { get; set; }
    public string ItemValueExpression { get; set; }
    public Type UnderlyingType { get; set; }
    public bool IsPrimaryKey { get; set; }
    public bool IsForeignKey { get; set; }
    public bool IsReadOnly { get; set; }
    public bool Scaffold { get; set; }
	public string MaxLength{ get; set; }
}

// Change this list to include any non-primitive types you think should be eligible for display/edit
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(Type type) {
    List<ModelProperty> results = GetEligibleProperties(type);
    
    foreach (ModelProperty prop in results) {
        if (prop.UnderlyingType == typeof(double) || prop.UnderlyingType == typeof(decimal)) {
            prop.ModelValueExpression = "String.Format(\"{0:F}\", " + prop.ModelValueExpression + ")";
        }
        else if (prop.UnderlyingType == typeof(DateTime)) {
            prop.ModelValueExpression = "String.Format(\"{0:g}\", " + prop.ModelValueExpression + ")";
        }
    }

    return results;
}

// Call this to determine if property has scaffolding enabled
bool Scaffold(PropertyInfo property) {
    foreach (object attribute in property.GetCustomAttributes(true)) {
        var scaffoldColumn = attribute as ScaffoldColumnAttribute;
        if (scaffoldColumn != null && !scaffoldColumn.Scaffold) {
            return false;
        }
    }
    return true;
}

// Call this to determine if the property represents a primary key. Change the
// code to change the definition of primary key.
bool IsPrimaryKey(PropertyInfo property) {
    if (string.Equals(property.Name, "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    if (string.Equals(property.Name, property.DeclaringType.Name + "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    foreach (object attribute in property.GetCustomAttributes(true)) {
        if (attribute is KeyAttribute) {  // WCF RIA Services and EF Code First explicit
            return true;
        }
        
        var edmScalar = attribute as EdmScalarPropertyAttribute;
        if (edmScalar != null && edmScalar.EntityKeyProperty) {  // EF traditional
            return true;
        }

        var column = attribute as ColumnAttribute;
        if (column != null && column.IsPrimaryKey) {  // LINQ to SQL
            return true;
        }
    }
    
    return false;
}

// This will return the primary key property name, if and only if there is exactly
// one primary key. Returns null if there is no PK, or the PK is composite.
string GetPrimaryKeyName(Type type) {
    IEnumerable<string> pkNames = GetPrimaryKeyNames(type);
    return pkNames.Count() == 1 ? pkNames.First() : null;
}

string MaxLength(PropertyInfo property) {
	var stringLength = property.GetCustomAttributes(typeof(StringLengthAttribute), false);
	if (stringLength != null && stringLength.Length > 0) {
		return ((StringLengthAttribute)stringLength[0]).MaximumLength.ToString();
	} else {
		return "0";
	}
}

// This will return all the primary key names. Will return an empty list if there are none.
IEnumerable<string> GetPrimaryKeyNames(Type type) {
    return GetEligibleProperties(type).Where(mp => mp.IsPrimaryKey).Select(mp => mp.Name);
}

// Call this to determine if the property represents a foreign key.
bool IsForeignKey(PropertyInfo property) {
    return MvcTemplateHost.RelatedProperties.ContainsKey(property.Name);
}

// A foreign key, e.g. CategoryID, will have a value expression of Category.CategoryID
string GetValueExpressionSuffix(PropertyInfo property) {
    RelatedModel propertyModel;
    MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);

    return propertyModel != null ? propertyModel.PropertyName + "." + propertyModel.DisplayPropertyName : property.Name;
}

// A foreign key, e.g. CategoryID, will have an association name of Category
string GetAssociationName(PropertyInfo property) {
    RelatedModel propertyModel;
    MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);

    return propertyModel != null ? propertyModel.PropertyName : property.Name;
}

// Helper
List<ModelProperty> GetEligibleProperties(Type type) {
    List<ModelProperty> results = new List<ModelProperty>();

    foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {
        Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
        if (prop.GetGetMethod() != null && prop.GetIndexParameters().Length == 0 && IsBindableType(underlyingType)) {
            string valueExpression = GetValueExpressionSuffix(prop);

            results.Add(new ModelProperty {
                Name = prop.Name,
                AssociationName = GetAssociationName(prop),
                ValueExpression = valueExpression,
                ModelValueExpression = "Model." + valueExpression,
                ItemValueExpression = "item." + valueExpression,
                UnderlyingType = underlyingType,
                IsPrimaryKey = IsPrimaryKey(prop),
                IsForeignKey = IsForeignKey(prop),
                IsReadOnly = prop.GetSetMethod() == null,
                Scaffold = Scaffold(prop),
				MaxLength = MaxLength(prop)   
            });
        }
    }

    return results;
}

// Helper
bool IsBindableType(Type type) {
    return type.IsPrimitive || bindableNonPrimitiveTypes.Contains(type);
}

MvcTextTemplateHost MvcTemplateHost {
    get {
        return (MvcTextTemplateHost)Host;
    }
}
#>