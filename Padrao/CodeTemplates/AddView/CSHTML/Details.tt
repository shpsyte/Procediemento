<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ import namespace="Microsoft.VisualStudio.Web.Mvc.Scaffolding.BuiltIn" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Microsoft.VisualStudio.Web.Mvc.Scaffolding.BuiltIn" #>
<#
MvcTextTemplateHost mvcHost = MvcTemplateHost;
#>
 @model <#= mvcHost.ViewDataTypeName.Split('.').Last() #>
<#
// The following chained if-statement outputs the file header code and markup for a partial view, a content page, or a regular view.
if(mvcHost.IsPartialView) {
#>

<#
} else if(mvcHost.IsContentPage) {
#>

@{
     ViewBag.Title = @Html.T("titleDetails").ToString();
<#
if (!String.IsNullOrEmpty(mvcHost.MasterPageFile)) {
#>
    
     Layout = "<#= mvcHost.MasterPageFile#>";
<#
}
#>
}
<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#= mvcHost.ViewName #></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>


<div class="container">
   <p><span class="label label">@Html.T("<#= mvcHost.ViewDataTypeName.Split('.').Last() #>")</span></p>

    <div class="controls">
        <div class="container" style="width: 100%">
            <div class="pull-left">
                <p>
				<# List<ModelProperty> ColumnTemplate = GetModelProperties(mvcHost.ViewDataType);
				string pkName = "";
					foreach (ModelProperty Prop1 in ColumnTemplate) {
						if (Prop1.ValueExpression != "cd_empresa")
						{
						if (Prop1.IsPrimaryKey) {
							 pkName = Prop1.ValueExpression;
						}
						break;
						}
					}
				if (pkName != null) {
				#>
   				    <a class="btn btn-primary" href="@Url.Action("Edit", "<#= mvcHost.ViewDataTypeName.Split('.').Last() #>", new { id = Model.<#= pkName #> })"><i class="fa fa-pencil-square-o"></i>@Html.T("btbEditar")</a>
                    <a class="btn " href="@Url.Action("Index", "<#= mvcHost.ViewDataTypeName.Split('.').Last() #>")"><i class="fa fa-caret-left"></i>@Html.T("VoltarListagem")</a>
				<#
				} else {
				#>
   				    <a class="btn btn-primary" href="@Url.Action("Edit", "<#= mvcHost.ViewDataTypeName.Split('.').Last() #>",  new { /* id=Model.PrimaryKey */ })"><i class="fa fa-pencil-square-o"></i>@Html.T("btbEditar")</a>
                    <a class="btn " href="@Url.Action("Index", "<#= mvcHost.ViewDataTypeName.Split('.').Last() #>")"><i class="fa fa-caret-left"></i>@Html.T("VoltarListagem")</a>
				<#
				}
				#>
					</p>
            </div>
        </div>
        <div class="container" style="width: 100%">
            <div class="tabbable">
                <!-- Only required for left/right tabs -->
                <ul class="nav nav-tabs">
                    <li class="active"><a href="#tab1" data-toggle="tab">@Html.T("Geral")</a></li>
                    <li><a href="#tab2" data-toggle="tab"></a></li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane active" id="tab1">
                       <div class="controls">
								<#
								foreach (ModelProperty property in GetModelProperties(mvcHost.ViewDataType)) {
									if (!property.IsPrimaryKey && property.Scaffold) {
								#>

									<div class="display-label">
										  <span class="display-label-text">@Html.DisplayNameFor(model => model.<#= property.ValueExpression #>)</span>
									</div>
									<div class="display-field">
										<span class="form-control uneditable-input">@Model.<#= property.ValueExpression #></span>
									</div>
								<#
									}
								}
								#>                            
                        </div>
                    </div>
                    <div class="tab-pane" id="tab2">
                       <div class="controls">
                            <div class="display-label">
                            </div>
                            <div class="display-field">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>













<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string AssociationName { get; set; }
    public string ValueExpression { get; set; }
    public string ModelValueExpression { get; set; }
    public string ItemValueExpression { get; set; }
    public Type UnderlyingType { get; set; }
    public bool IsPrimaryKey { get; set; }
    public bool IsForeignKey { get; set; }
    public bool IsReadOnly { get; set; }
    public bool Scaffold { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible for display/edit
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(Type type) {
    List<ModelProperty> results = GetEligibleProperties(type);
    
    foreach (ModelProperty prop in results) {
        if (prop.UnderlyingType == typeof(double) || prop.UnderlyingType == typeof(decimal)) {
            prop.ModelValueExpression = "String.Format(\"{0:F}\", " + prop.ModelValueExpression + ")";
        }
        else if (prop.UnderlyingType == typeof(DateTime)) {
            prop.ModelValueExpression = "String.Format(\"{0:g}\", " + prop.ModelValueExpression + ")";
        }
    }

    return results;
}

// Call this to determine if property has scaffolding enabled
bool Scaffold(PropertyInfo property) {
    foreach (object attribute in property.GetCustomAttributes(true)) {
        var scaffoldColumn = attribute as ScaffoldColumnAttribute;
        if (scaffoldColumn != null && !scaffoldColumn.Scaffold) {
            return false;
        }
    }
    return true;
}

// Call this to determine if the property represents a primary key. Change the
// code to change the definition of primary key.
bool IsPrimaryKey(PropertyInfo property) {
    if (string.Equals(property.Name, "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    if (string.Equals(property.Name, property.DeclaringType.Name + "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    foreach (object attribute in property.GetCustomAttributes(true)) {
        if (attribute is KeyAttribute) {  // WCF RIA Services and EF Code First explicit
            return true;
        }
        
        var edmScalar = attribute as EdmScalarPropertyAttribute;
        if (edmScalar != null && edmScalar.EntityKeyProperty) {  // EF traditional
            return true;
        }

        var column = attribute as ColumnAttribute;
        if (column != null && column.IsPrimaryKey) {  // LINQ to SQL
            return true;
        }
    }
    
    return false;
}

// This will return the primary key property name, if and only if there is exactly
// one primary key. Returns null if there is no PK, or the PK is composite.
string GetPrimaryKeyName(Type type) {
    IEnumerable<string> pkNames = GetPrimaryKeyNames(type);
    return pkNames.Count() == 1 ? pkNames.First() : null;
}

// This will return all the primary key names. Will return an empty list if there are none.
IEnumerable<string> GetPrimaryKeyNames(Type type) {
    return GetEligibleProperties(type).Where(mp => mp.IsPrimaryKey).Select(mp => mp.Name);
}

// Call this to determine if the property represents a foreign key.
bool IsForeignKey(PropertyInfo property) {
    return MvcTemplateHost.RelatedProperties.ContainsKey(property.Name);
}

// A foreign key, e.g. CategoryID, will have a value expression of Category.CategoryID
string GetValueExpressionSuffix(PropertyInfo property) {
    RelatedModel propertyModel;
    MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);

    return propertyModel != null ? propertyModel.PropertyName + "." + propertyModel.DisplayPropertyName : property.Name;
}

// A foreign key, e.g. CategoryID, will have an association name of Category
string GetAssociationName(PropertyInfo property) {
    RelatedModel propertyModel;
    MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);

    return propertyModel != null ? propertyModel.PropertyName : property.Name;
}

// Helper
List<ModelProperty> GetEligibleProperties(Type type) {
    List<ModelProperty> results = new List<ModelProperty>();

    foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {
        Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
        if (prop.GetGetMethod() != null && prop.GetIndexParameters().Length == 0 && IsBindableType(underlyingType)) {
            string valueExpression = GetValueExpressionSuffix(prop);

            results.Add(new ModelProperty {
                Name = prop.Name,
                AssociationName = GetAssociationName(prop),
                ValueExpression = valueExpression,
                ModelValueExpression = "Model." + valueExpression,
                ItemValueExpression = "item." + valueExpression,
                UnderlyingType = underlyingType,
                IsPrimaryKey = IsPrimaryKey(prop),
                IsForeignKey = IsForeignKey(prop),
                IsReadOnly = prop.GetSetMethod() == null,
                Scaffold = Scaffold(prop)
            });
        }
    }

    return results;
}

// Helper
bool IsBindableType(Type type) {
    return type.IsPrimitive || bindableNonPrimitiveTypes.Contains(type);
}

MvcTextTemplateHost MvcTemplateHost {
    get {
        return (MvcTextTemplateHost)Host;
    }
}
#>